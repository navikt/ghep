// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package gensql

import (
	"context"
)

const CreateEmail = `-- name: CreateEmail :exec
INSERT INTO emails (login, email) VALUES ($1, $2)
ON CONFLICT (login, email) DO NOTHING
`

type CreateEmailParams struct {
	Login string
	Email string
}

func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) error {
	_, err := q.db.Exec(ctx, CreateEmail, arg.Login, arg.Email)
	return err
}

const CreateUser = `-- name: CreateUser :exec
INSERT INTO users (login) VALUES ($1)
ON CONFLICT (login) DO NOTHING
`

func (q *Queries) CreateUser(ctx context.Context, login string) error {
	_, err := q.db.Exec(ctx, CreateUser, login)
	return err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE login = $1
`

func (q *Queries) DeleteUser(ctx context.Context, login string) error {
	_, err := q.db.Exec(ctx, DeleteUser, login)
	return err
}

const ExistsUser = `-- name: ExistsUser :one
SELECT EXISTS (SELECT login FROM users WHERE login = $1)
`

func (q *Queries) ExistsUser(ctx context.Context, login string) (bool, error) {
	row := q.db.QueryRow(ctx, ExistsUser, login)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT e.login
FROM emails e
WHERE e.email ilike $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRow(ctx, GetUserByEmail, email)
	var login string
	err := row.Scan(&login)
	return login, err
}
