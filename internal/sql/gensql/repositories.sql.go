// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: repositories.sql

package gensql

import (
	"context"
)

const createRepository = `-- name: CreateRepository :one
INSERT INTO repositories (name) VALUES ($1)
ON CONFLICT (name) DO NOTHING
RETURNING id
`

func (q *Queries) CreateRepository(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, createRepository, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getRepository = `-- name: GetRepository :one
SELECT id, name FROM repositories WHERE name = $1
`

func (q *Queries) GetRepository(ctx context.Context, name string) (Repository, error) {
	row := q.db.QueryRow(ctx, getRepository, name)
	var i Repository
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateRepository = `-- name: UpdateRepository :exec
UPDATE repositories
SET name = $1
WHERE name = $2
`

type UpdateRepositoryParams struct {
	Name    string
	OldName string
}

func (q *Queries) UpdateRepository(ctx context.Context, arg UpdateRepositoryParams) error {
	_, err := q.db.Exec(ctx, updateRepository, arg.Name, arg.OldName)
	return err
}
