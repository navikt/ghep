// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: slack.sql

package gensql

import (
	"context"
)

const CreateSlackID = `-- name: CreateSlackID :exec
INSERT INTO slack_ids (login, id) VALUES ($1, $2)
ON CONFLICT (login, id) DO NOTHING
`

type CreateSlackIDParams struct {
	Login string
	ID    string
}

func (q *Queries) CreateSlackID(ctx context.Context, arg CreateSlackIDParams) error {
	_, err := q.db.Exec(ctx, CreateSlackID, arg.Login, arg.ID)
	return err
}

const CreateSlackMessage = `-- name: CreateSlackMessage :exec
INSERT INTO slack_messages (team_slug, event_id, thread_ts, channel, payload) VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (team_slug, event_id) DO UPDATE
SET thread_ts = EXCLUDED.thread_ts,
    channel = EXCLUDED.channel,
    payload = EXCLUDED.payload
`

type CreateSlackMessageParams struct {
	TeamSlug string
	EventID  string
	ThreadTs string
	Channel  string
	Payload  []byte
}

func (q *Queries) CreateSlackMessage(ctx context.Context, arg CreateSlackMessageParams) error {
	_, err := q.db.Exec(ctx, CreateSlackMessage,
		arg.TeamSlug,
		arg.EventID,
		arg.ThreadTs,
		arg.Channel,
		arg.Payload,
	)
	return err
}

const GetSlackMessage = `-- name: GetSlackMessage :one
SELECT thread_ts, channel, payload
FROM slack_messages
WHERE team_slug = $1 AND event_id = $2
`

type GetSlackMessageParams struct {
	TeamSlug string
	EventID  string
}

type GetSlackMessageRow struct {
	ThreadTs string
	Channel  string
	Payload  []byte
}

func (q *Queries) GetSlackMessage(ctx context.Context, arg GetSlackMessageParams) (GetSlackMessageRow, error) {
	row := q.db.QueryRow(ctx, GetSlackMessage, arg.TeamSlug, arg.EventID)
	var i GetSlackMessageRow
	err := row.Scan(&i.ThreadTs, &i.Channel, &i.Payload)
	return i, err
}

const GetUserSlackID = `-- name: GetUserSlackID :one
SELECT id
FROM slack_ids
WHERE login = $1
`

func (q *Queries) GetUserSlackID(ctx context.Context, login string) (string, error) {
	row := q.db.QueryRow(ctx, GetUserSlackID, login)
	var id string
	err := row.Scan(&id)
	return id, err
}

const UpdateSlackMessage = `-- name: UpdateSlackMessage :exec
UPDATE slack_messages
SET payload = $3
WHERE team_slug = $1 AND event_id = $2
`

type UpdateSlackMessageParams struct {
	TeamSlug string
	EventID  string
	Payload  []byte
}

func (q *Queries) UpdateSlackMessage(ctx context.Context, arg UpdateSlackMessageParams) error {
	_, err := q.db.Exec(ctx, UpdateSlackMessage, arg.TeamSlug, arg.EventID, arg.Payload)
	return err
}
